# EMV Visa contactless payment successful run 
Protocol: emv_visa_k3 AnB

# Uppercase first letter names are variables instantiated per session
# Lowcase first letter names are constants  
Types: 
	# General card and terminal agents with constant issuer 
	# 
	Agent C,T,iss;
	
	# Constants for command to request applications and application types
	Number commandListApps; 
	Number respVisa;
	Number respMasterCard,respAmex,respUnionPay,respDiscover,respJCB; 

  # Visa PDOL values generated by the terminal per transaction
	Number PDOLDate,PDOLAmount,PDOLTVR,PDOLCountry,PDOLCurrency,PDOLTTQ;

  # Function abstractions for various protocol behaviours marked in AnB and
  # realised in PLAI with specification based on our translation strategy    
	Function [Agent,Number -> Number] fcnSelect;	  # Selects card application 
	Function [Agent,Number -> Number] fcnPDOL;		  # Request required payment informantion
	Function [Agent,Number -> Number] fcnCVM; 		  # Picks agent specific capabilities subsets/sublists
	Function [Agent,Number -> Number] fcnUsage;    # Picks transaction specific usage capabilities.
	Function [Agent,Number -> Number] fcnUnpred;   # Unpredictable number per agent and seed  
	Function [Agent,Number -> SeqNumber] fcnSeqNo; # Sequence number for Card transactions
	Function [Number,Number -> Number] fcnAgree;   # Agreement for CVM and USAGE between agents

  # Key generating functions
	Function [Agent -> PublicKey] sk;               # signature key per agent
	Function [Agent,Agent -> SymmetricKey] shk     # shared symmetric key between agents
 	
# Simple macro substitutions to encapsulate meaning by name 
Definitions:
	CardVisaCapabilities: fcnCVM(C,respVisa);										# general card capabilities by application see list type in Z model
	CardVisaPDOL			 	: fcnPDOL(C,respVisa);									# meta information required by card per application
	CSN						 			: fcnSeqNo(C,respVisa); 								# card unique sequence number per application 
	CUPN					 			: fcnUnpred(C,CSN);										  # unpredictable card number based on its sequence number

	TermUsageValid			     : fcnAgree(fcnUsage(C,respVisa),fcnUsage(T,respVisa)); # terminal and card usage agreement by application
	TransVisaCapabilities    : fcnCVM(T,TermUsageValid);						                # transaction capabilities under agreed usage
	TermTransVisaCapabilities: fcnCVM(T,TransVisaCapabilities);	                    # terminal specific capabilities under agreed transaction capabilities 

	PDOLUPN					: fcnUnpred(T,CardVisaPDOL);							  # terminal unpredictable number per transaction on card

  # LEO: Paolo, looking at EMVK3Lib.vdmsl, how could we create a funciton in AnB 
  #        to achieve fcnPDOL_Terminal needs? That is, I want a result that is a PDOL type as seq of values.
  PDOL					 	: PDOLDate, PDOLAmount, PDOLUPN, PDOLTVR, 
	                  PDOLCountry, PDOLCurrency;                # PDOL data requested by card for app.

	ACPayload				: PDOL,CSN;                                 # application cryptogram payload for issuer
	AC						 	: {|ACPayload|}shk(C,iss);                  # ACPayload encrypted with a pre-shared (by C,iss) symmetric key
	
	# AC                             : {|{iss,ACPayload}inv(sk(C))|}shk(C,iss);	# this definition allows to satisfy the iss weakly authenticates C on ACPayload
	

	SDADPayload			: ACPayload, CUPN;
	SDAD					 	: {SDADPayload}inv(sk(C))							      # card (assymetric encryption) signs PDOL payload 

Knowledge: 
	C: C,iss,sk,shk,inv(sk(C)),respVisa,fcnSelect,fcnPDOL,fcnCVM,fcnAgree,fcnUsage,fcnUnpred,fcnSeqNo;
	T: T,sk,commandListApps,fcnSelect,fcnPDOL,fcnCVM,fcnAgree,fcnUsage,fcnUnpred;
	iss: iss,C,shk,sk;
	C,iss share shk(C,iss)

Actions:
  #  PAOLO: add T to fix the attack; the fact that C does not know T's name does not allow to translate the goals in ProVerif annotations
	T -> C: commandListApps                  
	C -> T: C,respVisa
	T -> C: fcnSelect(C,respVisa)
	C -> T: CardVisaPDOL,CardVisaCapabilities
	T -> C: PDOL,TermTransVisaCapabilities
	C -> T: fcnAgree(CardVisaCapabilities,TermTransVisaCapabilities),SDAD,AC
	T->iss: PDOL,AC,C

Goals:
	# PM: This goal is violated because the identity of the terminal T is not included SDADPayload
	T weakly authenticates C on SDADPayload
	## in a nutshell, in the current EMV security goals fail, 
	## but weaker goals hold if we consider a terminal (pseudonym) 
	## rather the terminal id (real name)
	
	# PM: honest agent to dot give away keys, if C is compromized this goal is trivially violated
	# shk(C,iss) secret between C,iss
	
	# PM: this goal seems hard to achieve as never something signed by C reaches iss
	# but changing AC definition is satisfied
    iss weakly authenticates C on ACPayload
	
	# Card has the final veto about what's agreed upon and generates signatures and IOU for terminal 	
	# terminal authenticates card on the SDAD payload
	# PM: if we don't identify the terminal, intruder could
	#        hijack terminal validity; see attack trace found 
	# ME: EMV allow it? 
	# LF: for reference lets call this GOAL1 (to discuss / show trace with EMVCo people)
	#T weakly authenticates C on SDADPayload
	
	# QUESTION: why keep the terminal out of the signing?
	#  			it should have been SDADPayload the T
	
	# shk(C,iss) secret between C,iss
    
	# not able to capture multiple sequential sessions (iss knows previous CSN)
	#iss weakly authenticates C on ACPayload
	# Goal1: AC payload hasnt been changed
	# Goal2: C is genuine 
	# ME: security goal that SDAD/PDOL cannot be changed by others. How to do that?

	
