# Predicting problems in higher levels of abstraction before committing to implementing them
protocol Rev_2KP

imports
  Rev_2KPLib

##----------------------------------------------------------------------------------------

Types Section:
Agent : M,C,a
Number : empty,Desc,Auth,Price,TID
Function : ccn
SeqNumber : SQNx5,SQNx9,SQNx10
Function : pk,sk,hash,hmac
Symmetric_key : Hx4MDesc,Hx4accnCa
knowledge:
C : C,M,a,empty,pk,sk,hmac,hash,ccn(C,a)
M : C,M,a,inv(pk(M)),inv(sk(M)),empty,pk,sk,hmac,hash
a : C,M,a,inv(pk(a)),inv(sk(a)),empty,pk,sk,hmac,hash,ccn(C,a)

actions
## Notion of source$/target$ is a bit fuzzy; known syntactically so easy to get
## and enough for EMV. But in general, we would want a new/fetch mechanisms to
## actual values for agent variables, like in ProVerif.

#actionN(?)
#pre kps_Expr(msg, tpm?, knowledge$(source$))
#post update_knowledge$(target$, response$) 


##########################################################################################
#
#  A1. C *->* M : Price,Desc
#
##########################################################################################

action1(void)
pre source$ = C and target$ = M
{
  # Number is >= 0, Xbits in configuration
  var response$: action1resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action2, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}


##########################################################################################
#
#  A2. M *->* C : empty
#
##########################################################################################

action2(void)
pre source$ = M and target$ = C
{
  # Number is >= 0, Xbits in configuration
  var response$: action2resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action3, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}


##########################################################################################
#
#  A3. C -> M : {hmac(ccn(C,a),Hx4accnCa),{Hx4accnCa}pk(a),hmac(Desc,Hx4MDesc),{Hx4MDesc}pk(M)}pk(M)
#
##########################################################################################

action3(void)
pre source$ = C and target$ = M
{
  # Number is >= 0, Xbits in configuration
  var response$: action3resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action4, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}


##########################################################################################
#
#  A4. M -> C : {C,SQNx5,TID,hash(Price,TID,hmac(ccn(C,a),Hx4accnCa),hmac(Desc,Hx4MDesc))}inv(sk(M))
#
##########################################################################################

action4(void)
pre source$ = M and target$ = C
{
  # Number is >= 0, Xbits in configuration
  var response$: action4resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action5, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}


##########################################################################################
#
#  A5. C -> M : {Price,TID,ccn(C,a),hmac(ccn(C,a),Hx4accnCa),{Hx4accnCa}pk(a),hash(Price,TID,hmac(ccn(C,a),Hx4accnCa),hmac(Desc,Hx4MDesc))}pk(a)
#
##########################################################################################

action5(void)
pre source$ = C and target$ = M
{
  # Number is >= 0, Xbits in configuration
  var response$: action5resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action6, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}


##########################################################################################
#
#  A6. M -> a : {Price,TID,ccn(C,a),hmac(ccn(C,a),Hx4accnCa),{Hx4accnCa}pk(a),hash(Price,TID,hmac(ccn(C,a),Hx4accnCa),hmac(Desc,Hx4MDesc))}pk(a)
#
##########################################################################################

action6(void)
pre source$ = M and target$ = a
{
  # Number is >= 0, Xbits in configuration
  var response$: action6resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action7, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}


##########################################################################################
#
#  A7. a -> M : empty
#
##########################################################################################

action7(void)
pre source$ = a and target$ = M
{
  # Number is >= 0, Xbits in configuration
  var response$: action7resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action8, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}


##########################################################################################
#
#  A8. M -> a : {{a,SQNx9,Price,hmac(Desc,Hx4MDesc),{Hx4MDesc}pk(M),TID,hash(Price,TID,hmac(ccn(C,a),Hx4accnCa),hmac(Desc,Hx4MDesc))}inv(sk(M))}pk(a)
#
##########################################################################################

action8(void)
pre source$ = M and target$ = a
{
  # Number is >= 0, Xbits in configuration
  var response$: action8resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action9, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}


##########################################################################################
#
#  A9. a -> M : {{M,C,SQNx10,Auth,TID,hash(Price,TID,hmac(ccn(C,a),Hx4accnCa),hmac(Desc,Hx4MDesc))}inv(sk(a))}pk(M)
#
##########################################################################################

action9(void)
pre source$ = a and target$ = M
{
  # Number is >= 0, Xbits in configuration
  var response$: action9resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action10, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}


##########################################################################################
#
#  A10. M -> C : {M,C,SQNx10,Auth,TID,hash(Price,TID,hmac(ccn(C,a),Hx4accnCa),hmac(Desc,Hx4MDesc))}inv(sk(a))
#
##########################################################################################

action10(void)
pre source$ = M and target$ = C
{
  # Number is >= 0, Xbits in configuration
  var response$: action10resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action10, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}

