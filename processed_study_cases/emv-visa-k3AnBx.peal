# Predicting problems in higher levels of abstraction before committing to implementing them
protocol emv_visa_k3

imports
  emv_visa_k3Lib

##----------------------------------------------------------------------------------------

# Predicting problems in higher levels of abstraction before committing to implementing them
protocol AnB

imports
  AnBLib

##----------------------------------------------------------------------------------------

Types Section:
Agent : C,iss,T
Number : commandListApps
Number : respVisa
Number : respUnionPay,respJCB,respMasterCard,respAmex,respDiscover
Number : PDOLTVR,PDOLCurrency,PDOLDate,PDOLTTQ,PDOLCountry,PDOLAmount
Function : Number->Number]fcnSelect,[Agent
Function : Number->Number]fcnPDOL,[Agent
Function : Number->Number]fcnCVM,[Agent
Function : Number->Number]fcnUsage,[Agent
Function : Number->Number]fcnUnpred,[Agent
Function : Number->SeqNumber]fcnSeqNo,[Agent
Function : Number->Number]fcnAgree,[Number
Function : [Agent->PublicKey]sk
Function : [Agent,Agent->SymmetricKey]shk
Definitions:
CardVisaCapabilities
CardVisaPDOL
CSN
CUPN
TermUsageValid
TransVisaCapabilities
TermTransVisaCapabilities
PDOLUPN
PDOL
ACPayload
AC
SDADPayload
SDAD
knowledge:
C : C,iss,sk,shk,inv(sk(C)),respVisa,fcnSelect,fcnPDOL,fcnCVM,fcnAgree,fcnUsage,fcnUnpred,fcnSeqNo
T : T,sk,commandListApps,fcnSelect,fcnPDOL,fcnCVM,fcnAgree,fcnUsage,fcnUnpred
iss : iss,C,shk,sk
C,iss share shk(C,iss)

actions
## Notion of source$/target$ is a bit fuzzy; known syntactically so easy to get
## and enough for EMV. But in general, we would want a new/fetch mechanisms to
## actual values for agent variables, like in ProVerif.

#actionN(?)
#pre kps_Expr(msg, tpm?, knowledge$(source$))
#post update_knowledge$(target$, response$) 


##########################################################################################
#
#  A1. T -> C : commandListApps
#
##########################################################################################

action1(void)
pre source$ = T and target$ = C
{
  # Number is >= 0, Xbits in configuration
  var response$: action1resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action2, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}


##########################################################################################
#
#  A2. C -> T : C,respVisa
#
##########################################################################################

action2(void)
pre source$ = C and target$ = T
{
  # Number is >= 0, Xbits in configuration
  var response$: action2resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action3, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}


##########################################################################################
#
#  A3. T -> C : fcnSelect(C,respVisa)
#
##########################################################################################

action3(void)
pre source$ = T and target$ = C
{
  # Number is >= 0, Xbits in configuration
  var response$: action3resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action4, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}


##########################################################################################
#
#  A4. C -> T : CardVisaPDOL,CardVisaCapabilities
#
##########################################################################################

action4(void)
pre source$ = C and target$ = T
{
  # Number is >= 0, Xbits in configuration
  var response$: action4resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action5, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}


##########################################################################################
#
#  A5. T -> C : PDOL,TermTransVisaCapabilities
#
##########################################################################################

action5(void)
pre source$ = T and target$ = C
{
  # Number is >= 0, Xbits in configuration
  var response$: action5resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action6, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}


##########################################################################################
#
#  A6. C -> T : fcnAgree(CardVisaCapabilities,TermTransVisaCapabilities),SDAD,AC
#
##########################################################################################

action6(void)
pre source$ = C and target$ = T
{
  # Number is >= 0, Xbits in configuration
  var response$: action6resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action7, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}


##########################################################################################
#
#  A7. T -> iss : PDOL,AC,C
#
##########################################################################################

action7(void)
pre source$ = T and target$ = iss
{
  # Number is >= 0, Xbits in configuration
  var response$: action7resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action7, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}

