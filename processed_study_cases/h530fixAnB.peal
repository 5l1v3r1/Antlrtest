# Predicting problems in higher levels of abstraction before committing to implementing them
protocol H530fix

imports
  H530fixLib

##----------------------------------------------------------------------------------------

Types Section:
Agent : A,s,B
Number : t4,g,empty,t2,t1,M,t5,t3,XxX,YxY
Function : sk,hash
Function : shk
knowledge:
A : A,s,B,g,hash,t1,t2,t3,t4,t5,empty,shk(A,s)
B : A,B,s,g,hash,t1,t2,t3,t4,t5,empty,shk(B,s)
s : A,B,s,sk,g,hash,t1,t2,t3,t4,t5,empty,shk(A,s),shk(B,s)

actions
## Notion of source$/target$ is a bit fuzzy; known syntactically so easy to get
## and enough for EMV. But in general, we would want a new/fetch mechanisms to
## actual values for agent variables, like in ProVerif.

#actionN(?)
#pre kps_Expr(msg, tpm?, knowledge$(source$))
#post update_knowledge$(target$, response$) 


##########################################################################################
#
#  A1. A -> B : A,B,exp(g,XxX),hash(shk(A,s),t1,A,B,exp(g,XxX))
#
##########################################################################################

action1(void)
pre source$ = A and target$ = B
{
  # Number is >= 0, Xbits in configuration
  var response$: action1resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action2, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}


##########################################################################################
#
#  A2. B -> s : A,B,exp(g,XxX),hash(shk(A,s),t1,A,B,exp(g,XxX)),B,exp(g,XxX),exp(g,YxY),hash(shk(B,s),t2,A,B,exp(g,XxX),hash(shk(A,s),t1,A,B,exp(g,XxX)),B,exp(g,XxX),exp(g,YxY))
#
##########################################################################################

action2(void)
pre source$ = B and target$ = s
{
  # Number is >= 0, Xbits in configuration
  var response$: action2resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action3, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}


##########################################################################################
#
#  A3. s -> B : B,A,exp(g,XxX),hash(shk(A,s),t3,B,exp(g,XxX),exp(g,YxY)),hash(shk(B,s),t4,B,A,exp(g,XxX),hash(shk(A,s),t3,B,exp(g,XxX),exp(g,YxY)))
#
##########################################################################################

action3(void)
pre source$ = s and target$ = B
{
  # Number is >= 0, Xbits in configuration
  var response$: action3resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action4, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}


##########################################################################################
#
#  A4. B -> A : B,A,exp(g,YxY),hash(shk(A,s),t3,B,exp(g,XxX),exp(g,YxY)),hash(exp(exp(g,XxX),YxY),t5,B,A,exp(g,YxY),hash(shk(A,s),t3,B,exp(g,XxX),exp(g,YxY)))
#
##########################################################################################

action4(void)
pre source$ = B and target$ = A
{
  # Number is >= 0, Xbits in configuration
  var response$: action4resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action5, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}


##########################################################################################
#
#  A5. A -> B : {|M|}exp(exp(g,XxX),YxY)
#
##########################################################################################

action5(void)
pre source$ = A and target$ = B
{
  # Number is >= 0, Xbits in configuration
  var response$: action5resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action5, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}

