# Predicting problems in higher levels of abstraction before committing to implementing them
protocol AnBx_From_A_secret_for_B_C_honest

imports
  AnBx_From_A_secret_for_B_C_honestLib

##----------------------------------------------------------------------------------------

Types Section:
Agent : c,A,B
Number : empty,Msg
Function : sk,hmac,hash,pk
knowledge:
A : A,B,c,inv(pk(A)),inv(sk(A)),empty,pk,sk,hmac,hash
B : A,B,c,inv(pk(B)),inv(sk(B)),empty,pk,sk,hmac,hash
c : A,B,c,inv(pk(c)),inv(sk(c)),empty,pk,sk,hmac,hash

actions
## Notion of source$/target$ is a bit fuzzy; known syntactically so easy to get
## and enough for EMV. But in general, we would want a new/fetch mechanisms to
## actual values for agent variables, like in ProVerif.

#actionN(?)
#pre kps_Expr(msg, tpm?, knowledge$(source$))
#post update_knowledge$(target$, response$) 


##########################################################################################
#
#  A1. A -> B : {{B,c,Msg}inv(sk(A))}pk(B)
#
##########################################################################################

action1(void)
pre source$ = A and target$ = B
{
  # Number is >= 0, Xbits in configuration
  var response$: action1resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action2, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}


##########################################################################################
#
#  A2. B -> c : {{B,c,Msg}inv(sk(A))}pk(c)
#
##########################################################################################

action2(void)
pre source$ = B and target$ = c
{
  # Number is >= 0, Xbits in configuration
  var response$: action2resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action2, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}

