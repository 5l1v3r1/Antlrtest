# Predicting problems in higher levels of abstraction before committing to implementing them
protocol Rev_3KP

imports
  Rev_3KPLib

##----------------------------------------------------------------------------------------

Types Section:
Agent : C,a,M
Certified : M,a,C
Number : Price,TID,Desc,Auth
Function : Agent->Number]ccn,[Agent
Definitions:
Can
HCan
HDesc
HContract
knowledge:
C : C,M,a
M : C,M,a
a : C,M,a
C,a share Can
C,M agree Price,Desc

actions
## Notion of source$/target$ is a bit fuzzy; known syntactically so easy to get
## and enough for EMV. But in general, we would want a new/fetch mechanisms to
## actual values for agent variables, like in ProVerif.

#actionN(?)
#pre kps_Expr(msg, tpm?, knowledge$(source$))
#post update_knowledge$(target$, response$) 


##########################################################################################
#
#  A5. a -> M : empty
#
##########################################################################################

action5(void)
pre source$ = a and target$ = M
{
  # Number is >= 0, Xbits in configuration
  var response$: action5resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action6, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}

