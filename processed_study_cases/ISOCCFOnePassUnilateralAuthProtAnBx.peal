# Predicting problems in higher levels of abstraction before committing to implementing them
protocol ISOCCFOnePassUnilateralAuthProt

imports
  ISOCCFOnePassUnilateralAuthProtLib

##----------------------------------------------------------------------------------------

Types Section:
Agent : A,B
Number : Text1,Text2,empty,NxA,NxB
Function : f
Function : shk
Function : pk,hmac,sk,hash
knowledge:
A : A,B,f,empty,pk,sk,hmac,hash,shk(A,B)
B : B,A,f,empty,pk,sk,hmac,hash,shk(A,B)

actions
## Notion of source$/target$ is a bit fuzzy; known syntactically so easy to get
## and enough for EMV. But in general, we would want a new/fetch mechanisms to
## actual values for agent variables, like in ProVerif.

#actionN(?)
#pre kps_Expr(msg, tpm?, knowledge$(source$))
#post update_knowledge$(target$, response$) 


##########################################################################################
#
#  A1. A -> B : NxA,B,Text2,f(shk(A,B),NxA,B,Text1),NxA,B,Text1
#
##########################################################################################

action1(void)
pre source$ = A and target$ = B
{
  # Number is >= 0, Xbits in configuration
  var response$: action1resp;

  ##################################################################
  # BEGIN
  #
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++ CG=compiler generated?
  ## see uk.ac.ncl.emv_emulator.EntryPoint.DoTransaction():278
  ##
  ## = initialisation code to connect to the CardReaader
  ##++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #
  # END
  ##################################################################

  transmit(target$, action1, response$);               ## always next action for AnB protocols only

  ## transmit updates the knowledge of the target$ wrt response$ and target's cyphering capabilities (i.e. kps from AnB)
}

